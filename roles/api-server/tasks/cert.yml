#FIXME wait until all the apiservers are up and generate all of them once

- name: Wait for api-server activated
  shell: |
    curl -s -o /dev/null -w "%{http_code}" --cacert {{ kube_ca_crt }} --cert {{ admin_cert_crt }} --key {{ admin_cert_key }} https://127.0.0.1:6443/healthz
  register: healthy
  until: healthy is succeeded and healthy.stdout == "200"
  retries: 50
  delay: 5

- name: Generate certificate for kube-scheduler
  shell: |
    KUBECONFIG=/etc/kubernetes/kube-scheduler.conf kubectl config set-cluster default-cluster --server={{ apiserver_endpoint }} --certificate-authority {{ kube_ca_crt }} --embed-certs
    KUBECONFIG=/etc/kubernetes/kube-scheduler.conf kubectl config set-credentials kube-scheduler --client-key {{ scheduler_cert_key }} --client-certificate {{ scheduler_cert_crt }} --embed-certs
    KUBECONFIG=/etc/kubernetes/kube-scheduler.conf kubectl config set-context default-system --cluster default-cluster --user kube-scheduler
    KUBECONFIG=/etc/kubernetes/kube-scheduler.conf kubectl config use-context default-system

- name: Generate certificate for kube-controller-manager
  shell: |
    KUBECONFIG=/etc/kubernetes/kube-controller-manager.conf kubectl config set-cluster default-cluster --server={{ apiserver_endpoint }} --certificate-authority {{ kube_ca_crt }} --embed-certs
    KUBECONFIG=/etc/kubernetes/kube-controller-manager.conf kubectl config set-credentials kube-controller-manager --client-key {{ controller_manager_cert_key }} --client-certificate {{ controller_manager_cert_crt }} --embed-certs
    KUBECONFIG=/etc/kubernetes/kube-controller-manager.conf kubectl config set-context default-system --cluster default-cluster --user kube-controller-manager
    KUBECONFIG=/etc/kubernetes/kube-controller-manager.conf kubectl config use-context default-system

- name: Generate certificate for admin
  shell: |
    KUBECONFIG=/etc/kubernetes/admin.conf kubectl config set-cluster default-cluster --server={{ apiserver_endpoint }} --certificate-authority {{ kube_ca_crt }} --embed-certs
    KUBECONFIG=/etc/kubernetes/admin.conf kubectl config set-credentials admin --client-key {{ admin_cert_key }} --client-certificate {{ admin_cert_crt }} --embed-certs
    KUBECONFIG=/etc/kubernetes/admin.conf kubectl config set-context default-system --cluster default-cluster --user admin
    KUBECONFIG=/etc/kubernetes/admin.conf kubectl config use-context default-system
    mkdir -p /root/.kube
    cp -fp /etc/kubernetes/admin.conf /root/.kube/config

- name: Make sure remote path exists
  file:
    path: "{{ remote_kubelet_certs_path }}"
    state: directory

- name: Generate certificate for kubelet on masters
  shell: |
    KUBECONFIG=/etc/kubernetes/kubelet.conf kubectl config set-cluster default-cluster --server={{ apiserver_endpoint }} --certificate-authority {{ kube_ca_crt }} --embed-certs
    KUBECONFIG=/etc/kubernetes/kubelet.conf kubectl config set-credentials system:node:{{ inventory_hostname }} --client-key /etc/kubernetes/pki/kubelet-{{ inventory_hostname }}-key.pem --client-certificate /etc/kubernetes/pki/kubelet-{{ inventory_hostname }}.pem --embed-certs
    KUBECONFIG=/etc/kubernetes/kubelet.conf kubectl config set-context default-system --cluster default-cluster --user system:node:{{ inventory_hostname }}
    KUBECONFIG=/etc/kubernetes/kubelet.conf kubectl config use-context default-system

- name: Generate config for kubelet
  shell: |
    KUBECONFIG={{ remote_kubelet_certs_path }}/kubelet-{{ item }}.config kubectl config set-cluster default-cluster --server={{ apiserver_endpoint }} --certificate-authority {{ kube_ca_crt }} --embed-certs
    KUBECONFIG={{ remote_kubelet_certs_path }}/kubelet-{{ item }}.config kubectl config set-credentials system:node:{{ item }} --client-key /etc/kubernetes/pki/kubelet-{{ item }}-key.pem --client-certificate /etc/kubernetes/pki/kubelet-{{ item }}.pem --embed-certs
    KUBECONFIG={{ remote_kubelet_certs_path }}/kubelet-{{ item }}.config kubectl config set-context default-system --cluster default-cluster --user system:node:{{ item }}
    KUBECONFIG={{ remote_kubelet_certs_path }}/kubelet-{{ item }}.config kubectl config use-context default-system
  with_inventory_hostnames:
  - nodes

- name: Generate certificate for api-server
  include_tasks: ../../kubelet/tasks/replicate-service.yml

- name: Reconfigure kubelet service
  systemd:
    name: kubelet.service
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: Set master label
  shell: kubectl label no {{ inventory_hostname }} --overwrite node-role.kubernetes.io/master=
  register: healthy
  until: healthy is succeeded
  retries: 10
  delay: 2